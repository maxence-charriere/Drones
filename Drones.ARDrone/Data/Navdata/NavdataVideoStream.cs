using System.IO;

namespace Drones.ARDrone.Data.Navdata
{
    public class NavdataVideoStream : INativeBlock
    {
        // @Properties
        public ushort Tag { get; private set; }
        public ushort Size { get; private set; }

        /// <summary> Quantizer reference used to encode frame [1:31]. </summary>
        ///
        /// <value> The quant. </value>
        public byte Quant { get; private set; }

        /// <summary> Frame size (bytes) </summary>
        ///
        /// <value> The size of the frame. </value>
        public uint FrameSize { get; private set; }

        /// <summary> Frame index. </summary>
        ///
        /// <value> The frame number. </value>
        public uint FrameNumber { get; private set; }

        /// <summary> ATCmd ref sequence number. </summary>
        ///
        /// <value> at command reference sequence. </value>
        public uint ATCmdRefSeq { get; private set; }

        /// <summary> Mean time between two consecutive atcmd_ref (ms) </summary>
        ///
        /// <value> at command variable reference gap. </value>
        public uint ATCmdMeanRefGap { get; private set; }
        
        public float ATCmdVarRefGap { get; private set; }

        /// <summary> Estimator of atcmd link quality. </summary>
        ///
        /// <value> at command reference quality. </value>
        public uint ATCmdRefQuality { get; private set; }

        /// <summary> Measured out throughput from the video tcp socket. </summary>
        ///
        /// <value> The out bitrate. </value>
        public uint OutBitrate { get; private set; }

        /// <summary> Last frame size generated by the video encoder. </summary>
        ///
        /// <value> The desired bitrate. </value>
        public uint DesiredBitrate { get; private set; }

        public int Data1 { get; private set; }
        public int Data2 { get; private set; }
        public int Data3 { get; private set; }
        public int Data4 { get; private set; }
        public int Data5 { get; private set; }

        public uint TcpQueueLevel { get; private set; }
        public uint FifoQueueLevel { get; private set; }   


        // @Public
        public NavdataVideoStream()
        {
        }

        public static NavdataVideoStream FromByteArray(byte[] data, uint position)
        {
            var block = new NavdataVideoStream();
            using (var ms = new MemoryStream(data))
            {
                using (var reader = new BinaryReader(ms))
                {
                    reader.BaseStream.Seek(position, SeekOrigin.Begin);

                    block.Tag = reader.ReadUInt16();
                    block.Size = reader.ReadUInt16();
                    block.Quant = reader.ReadByte();
                    block.FrameSize = reader.ReadUInt32();
                    block.FrameNumber = reader.ReadUInt32(); ;
                    block.ATCmdRefSeq = reader.ReadUInt32();
                    block.ATCmdMeanRefGap = reader.ReadUInt32();
                    block.ATCmdVarRefGap = reader.ReadSingle();
                    block.ATCmdRefQuality = reader.ReadUInt32();
                    block.OutBitrate = reader.ReadUInt32();
                    block.DesiredBitrate = reader.ReadUInt32();
                    block.Data1 = reader.ReadInt32();
                    block.Data2 = reader.ReadInt32();
                    block.Data3 = reader.ReadInt32();
                    block.Data4 = reader.ReadInt32();
                    block.Data5 = reader.ReadInt32();
                    block.TcpQueueLevel = reader.ReadUInt32();
                    block.FifoQueueLevel = reader.ReadUInt32();
                }
            }
            return block;
        }
    }
}
